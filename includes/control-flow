<h1 id='control-flow'>Control flow</h1>
<p>Consider your code as a map. The machine is like a laser sharp <em>pointer</em> focused o a single line of your script (the backend). Each line has a corresponding output and each action (<code>input()</code>) has a corresponding reaction. Control flow directs where the <em>pointer</em> moves.</p>
<h2 id='conditional-statements'>Conditional statements</h2><div class="highlight"><pre class="highlight python tab-python"><code><span class="n">propert_price</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"What is the price of your property: "</span><span class="p">))</span>

<span class="k">if</span> <span class="nb">property</span> <span class="o">&lt;=</span> <span class="mi">1000</span><span class="p">:</span>
    <span class="k">return</span> <span class="s">"Let's make this deal happen."</span>
<span class="k">elif</span> <span class="nb">property</span> <span class="o">&lt;=</span> <span class="mi">1200</span><span class="p">:</span>
    <span class="k">return</span> <span class="s">"Let's talk this out."</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">return</span> <span class="s">"Call me back in 1 year."</span>                    <span class="c1"># good practice to prepare a condition for edge cases
</span>
<span class="k">if</span> <span class="nb">property</span> <span class="o">&lt;=</span> <span class="mi">1000</span><span class="p">:</span>
    <span class="k">return</span> <span class="s">"Let's make this deal happen."</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">if</span> <span class="nb">property</span> <span class="o">&lt;=</span> <span class="mi">1200</span><span class="p">:</span>                                <span class="c1"># see the nested condition
</span>        <span class="k">return</span> <span class="s">"Let's talk this out."</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"Call me back in 1 year."</span>
</code></pre></div>
<p>Conditional statements act like switches to direct the <em>pointer</em> down one of many paths</p>

<p>All <code>if</code> conditional statements are boolean values. Thus, more complex flows are just simple conditions nested together. The 2 code examples are equivalent.</p>

<p>It is good coding practice to keep nested code blocks to a minimum. When possible, follow the first example that uses <code>if, elif,else</code>.</p>

<ul>
<li><p>Checking if variable exists
If you are check if a value exist, use the <code>if variable:</code> condition. This uses the <a href="#">truthy</a> logic.</p></li>
<li><p>Return statements
Take note if you are using return statements. Each function call will only execute one return statement. Ensure that your conditional statement does not contain 2&lt; or no return statements.
<aside class="notice">
Return is only used for function calls. Ensure that your code is within a function block, else it will cause an error.
</aside></p>
<h2 id='loops'>Loops</h2></li>
</ul>
<div class="highlight"><pre class="highlight plaintext"><code>for word in sentence:
    print()
</code></pre></div>
<p>An iterator/iterable is an object that reads one value/element at a time. For example, sequence types (strings, list, tuples) or non-sequence containers (dictionary, files).</p>

<p>A <code>for</code> loop is a pre-determined number of iterations, where you are aware of how many time the code block will run. A <code>while</code> loop is an indefinite iteration, where the number of loops is unknown and only ends when the condition is met.</p>

<p>A good naming convention is to use singular-plural dyads:
<code>for word in sentence:</code></p>
<h3 id='range'>Range()</h3><div class="highlight"><pre class="highlight plaintext"><code>for i in range(1, 100, 2):
    print(i)
</code></pre></div>
<p>Loops work well on pre-determind, fixed iterables. Create a loop with <code>range()</code>. This is an immutable sequence of integers. The arguments are (start, stop, step).</p>
<h3 id='break-and-continue-flow'>Break and continue flow</h3><div class="highlight"><pre class="highlight python tab-python"><code><span class="n">manifest</span> <span class="o">=</span> <span class="p">[(</span><span class="s">"bananas"</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span> <span class="p">(</span><span class="s">"mattresses"</span><span class="p">,</span> <span class="mi">24</span><span class="p">),</span> <span class="p">(</span><span class="s">"dog kennels"</span><span class="p">,</span> <span class="mi">42</span><span class="p">),</span> <span class="p">(</span><span class="s">"machine"</span><span class="p">,</span> <span class="mi">120</span><span class="p">),</span> <span class="p">(</span><span class="s">"cheeses"</span><span class="p">,</span> <span class="mi">5</span><span class="p">)]</span>

<span class="n">weight</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">cargo_name</span><span class="p">,</span> <span class="n">cargo_weight</span> <span class="ow">in</span> <span class="n">manifest</span><span class="p">:</span>                               <span class="c1"># call both elements in the tuple
</span>    <span class="c1"># current weight after the previous loop
</span>    <span class="k">if</span> <span class="n">weight</span> <span class="o">&gt;=</span> <span class="mi">100</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"  breaking from the loop now!"</span><span class="p">)</span>
        <span class="k">break</span>                                                           <span class="c1"># stop the loop immediately.
</span>    <span class="k">elif</span> <span class="n">weight</span> <span class="o">+</span> <span class="n">cargo_weight</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">:</span>                                   <span class="c1"># check in advance
</span>        <span class="c1"># skipping this iteration of (cargo_name, cargo_weight)
</span>        <span class="k">continue</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">items</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">cargo_name</span><span class="p">)</span>
        <span class="n">weight</span> <span class="o">=</span> <span class="n">weight</span> <span class="o">+</span> <span class="n">cargo_weight</span>

<span class="k">print</span><span class="p">(</span><span class="s">"The final weight is {}, holding {} items."</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">weight</span><span class="p">,</span> <span class="n">items</span><span class="p">))</span>
</code></pre></div>
<p>Within loops, you may customize flows which allow the loops to <code>break</code> when a certain condition is met, or skip this iteration and <code>continue</code> with the next.</p>

<p>This is useful for loops that iterate over an unknown number of variable (e.g. <code>while</code> loops).</p>
